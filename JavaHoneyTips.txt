Java honey tips

1. garbage collector 
- automatically memory management
- don't have to 'delete' objects
- delete objects (when no references pointing to them)
- Java objects are created on the heap...

2. I/O : Scanner/System.out

3. Date & Time
- import java.util.Date;
- import java.text.SimpleDateFormat;
ex)
-----------------------------------
final Date now = new Date( );
final SimpleDateFormat format = new SimpleDateFormat ("E yyyy.MM.dd 'at' hh:mm:ss a zzz");

System.out.println("Current Date: " + format.format(now));
// Current Date: 수 2020.09.09 at 03:07:17 오후 KST

- delay
Thread.sleep(3 * 1000); // throws InterruptedException
-----------------------------------

4. Enhanced for loop 
- for ( final int i : numbers ) { ... }

5. 'final' keyword for constants
- final int a = 10;

6. HashMap
- import java.util.HashMap;
- import java.util.Map;

7. 'static' keyword 
-When a member is declared as static, it means it is associated with the class itself, not with individual objects created from the class.

Static Variables (Class Variables):
- Static variables are also known as class variables because they are shared among all instances (objects) of the class.

Static Methods:
- They are declared using the static keyword and can be called using the class name, without creating an object.

Static Blocks:
- Static blocks are used to initialize static variables or perform one-time setup for the class.

Ex)
-----------------------------------
public class MyClass {
    static {
        // Initialization code for static variables
        staticVar = 20;
    }
    static int staticVar;
}
-----------------------------------

Static Nested Classes:
- Static nested classes can be instantiated without an instance of the outer class.

Ex) main method of Java Class..
-----------------------------------
public class ArrayEnum {
    public static void main(String[] args) { ... }
-----------------------------------

8. Reflection

Java Reflection
- a feature that allows you to inspect and manipulate the structure, behavior, and metadata of Java classes, objects, methods, and fields at runtime.

ex)
-----------------------------------
import java.lang.reflect.*;

// print class name and superclass name
final Class<?> cl = Class.forName(name); // java.lang.Class
final Class<?> supercl = cl.getSuperclass();
-----------------------------------

9. Java Documentation Comment
- allow you to embed information about your program into the program itself.\
- make .html files shows Java Documentation

/** Java documentation comment */

ex)
-----------------------------------
import java.io.*;
 
/**
* This class demonstrates documentation comments.
* @author Ayan Amhed 
* @version 1.2
*/
public class SquareNum {
   /**
   * This method returns the square of num.
   * This is a multiline description. You can use
   * as many lines as you like.
   * @param num The value to be squared.
   * @return num squared.
   */
   public double square(double num) {
      return num * num;
   }

-----------------------------------

10. throws
announce that this method can throw an exception.

ex)
-----------------------------------
public double getNumber() throws IOException { ... }

11. abstract

11-1. abstract class
- can't be instantiated on its own
- can have abstract methods and concrete methods
- Subclasses of an abstract class must implement all the abstract methods
- or be declared as abstract themselves.

11-2. abstract method
- has no implementation (no method body)
- must be implemented by concrete subclasses.

12. Object class
- fundamental class, the root of the class hierarchy
- Every class in Java inherits 'Object' class. (directly or indirectly)

- Common Methods :
	- equals(Object obj): Compares two objects for equality.
	- hashCode(): Returns a hash code value for the object.
	- toString(): Returns a string representation of the object.
	- getClass(): Returns the runtime class of the object.
	- clone(): Creates and returns a copy of the object.
	- finalize(): Called by the garbage collector before an object is reclaimed.
	- wait(), notify(), and notifyAll(): Used for inter-thread communication (synchronization).
can override the methods inherited from 'Object'

13. Annotation @
- metadata that provide additional information about the code.
- to the compiler, tools, and runtime environments

- enhance code readability, provide configuration instructions, enable the creation of custom behaviors.

ex)
-----------------------------------
@AnnotationType(value = "example")
public class MyClass {
    // ...
}

- Built-In Annotations :
@Override, @Deprecated, @SuppressWarnings ...

- Custom Annotation : 
Developers can define their custom annotations by creating annotation interfaces

ex)
-----------------------------------
import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyAnnotation {
    String value() default "default value";
}

public class MyClass {
    @MyAnnotation(value = "custom value")
    public void myMethod() {
        // ...
    }
}


- Retention Policy :
	- SOURCE : retained only in the source code
	- CLASS : retained in the compiled bytecode
	- RUNTIME : retained in the bytecode and available at runtime 

## Package Concept in Java

A package in Java is a way to organize related classes and interfaces into a group, providing a hierarchical structure for managing code in Java applications.

### Key Points:

- **Package Structure:** Packages are directories containing related classes and sub-packages, following the reverse domain naming convention (e.g., `com.example.myapp`).

- **Organizing Code:** Packages help organize and categorize code, improving maintainability and scalability of Java applications.

- **Visibility and Access Control:** Access control includes package-level visibility; classes in the same package can access package-private members of other classes in the same package.

- **Import Statements:** The `import` statement allows you to use classes from other packages, simplifying code and improving readability.

- **Java Standard Library Packages:** Java provides a standard library organized into packages, including common ones like `java.lang`, `java.util`, and `java.io`.

- **Creating Custom Packages:** You can create custom packages by organizing class files into directories that match the package name.

- **Package Declaration:** Every Java source file should have a `package` declaration to indicate its package affiliation.

- **Accessing Classes in Other Packages:** Access classes from other packages by using fully qualified class names or importing classes with `import` statements.

- **JAR Files:** Packages are used to organize and bundle classes in JAR files, a common distribution method for Java libraries and applications.

- **Package Naming Conventions:** Following naming conventions for packages, classes, and methods is essential for readability and maintainability.

Packages are a fundamental concept in Java, enabling code organization, reusability, and modular development in Java applications.

